using UnityEngine;
using System.Collections;
using System.Collections.Generic;
[System.Serializable]
public class InventoryAlsoTest : MonoBehaviour {
	
	public Inventory inv;
	public int slotsX, slotsY;
	public GUISkin InvBackground;
	public List<Item> equipment = new List<Item>();
	public List<Item> slotEqp = new List<Item> ();
	private bool showInventory;
	private itemDatabase dataBase;
	
	//tooltip
	private bool showTooltip;
	private string tooltip;
	
	//drag and drop
	public bool draggingItem;
	public Item draggedItem;
	public int eqpPrevIndex;
	//equipment
	public Item swapItem;
	public int swapIndex;
	public bool InInventory = true;

	
	// Use this for initialization
	void Start () {
		for (int i = 0; i <(slotsX * slotsY); i++)
		{
			slotEqp.Add(new Item());
			equipment.Add (new Item());
		}
		//	inv = GameObject.FindGameObjectWithTag ("Equipment").GetComponent<Equipment> ();
		//Testing purposes
		inv = GameObject.FindGameObjectWithTag ("Inventory").GetComponent<Inventory> ();
		dataBase = GameObject.FindGameObjectWithTag ("ItemDatabase").GetComponent<itemDatabase> ();
		AddItem (1);
		AddItem (0);
		AddItem (1);
		AddItem (0);
		AddItem (1);
		AddItem (0);
		
		
	}
	void Update()
	{
//		print (swap.itemName + swap.itemID + "From EQP");
		if (Input.GetKeyDown (KeyCode.I)) 
		{
			showInventory = !showInventory;

		}
	}
	
	void OnGUI()
	{
		GUI.depth = 2;
		//if (GUI.Button (new Rect (400, 350,100,40), "Save Game"))
		
		//if (GUI.Button (new Rect (40, 350, 100, 40), "Load Game"))
		
		tooltip = "";
		GUI.skin = InvBackground;
		if (showInventory) 
		{
			DrawInventory();
			GUI.Label (new Rect (588,100, 100,75), "Equipment");
		}
		if (showTooltip && showInventory) 
		{//Use this to change tooltip for Mobile
			GUI.Box (new Rect (Event.current.mousePosition.x + 10f, Event.current.mousePosition.y, 200,200), tooltip, InvBackground.GetStyle("Tooltip"));
		}
		if (draggingItem)
		{
			inv.draggingItem = true;
			inv.draggedItem = draggedItem;
			GUI.DrawTexture(new Rect (Event.current.mousePosition.x, Event.current.mousePosition.y, 50,50), draggedItem.itemIcon);
		}
		if (!draggingItem) 
		{
			inv.draggingItem = false;
		}
	}
	void DrawInventory()
	{
		Event e = Event.current;
		int i = 0;
		swapItem = new Item();//Test
		swapIndex = -1;
		if (inv.swapItem.itemID >= 0)
			InInventory = true;
		for (int y = 0; y < slotsY; y++)
		{
			for(int x = 0; x < slotsX; x++)
			{
				Rect slotRect = new Rect (585 + x * 34, y * 34, 34, 34);
				GUI.Box (slotRect, "", InvBackground.GetStyle ("SlotBackground"));
				slotEqp[i] = equipment[i];
		//		Rect invFinder = new Rect (585 + x * 34, y * 34, 34, 34);
		//		swap = inventory[i].itemID;////TEST////
				if (slotEqp[i].itemName != null)
				{
					GUI.DrawTexture (slotRect, equipment[i].itemIcon);
					if (slotRect.Contains (e.mousePosition))
					{	swapItem = equipment[i];
						swapIndex = i;
						tooltip = CreateToolTip (slotEqp[i]);
						showTooltip = true;
						if(e.button == 0 && e.type == EventType.mouseDrag && !draggingItem)
						{
						//	swap = inventory[i].itemID;
							draggingItem = true;
							eqpPrevIndex = i;
							draggedItem = slotEqp[i];
							equipment[i] = new Item();
						}
						if(e.isMouse && e.type == EventType.mouseDown && e.button == 1)
						{
							if (slotEqp[i].itemType == Item.ItemType.eWarfare)
							{
								print ("Used: " + slotEqp[i].itemName);
								equipment[i].stackAmount -=1;
								//UseConsumeable(slots[i].itemID);
								if (slotEqp[i].stackAmount <= 0)
									RemoveItem (slotEqp[i].itemID);
							}
						}
						
						////********TEST*******//////
						if (e.type == EventType.mouseUp && draggingItem)
						{
				//			if(draggedItem.itemName == slotEqp[i].itemName && draggedItem.isStackable)
				//			{ //Stackable items, motherfucker.
				//				int index = dataBase.items.FindIndex(item=>item.itemName == equipment[i].itemName);
				//				if(index >= 0)
				//				{
				//				print (index);
				//				equipment[i] = (new Item (equipment[i].itemName, index+1, equipment[i].isStackable, equipment[i].isEquipment, equipment[i].stackAmount+draggedItem.stackAmount, equipment[i].maximumStack, equipment[i].itemDesc, equipment[i].itemValue ,equipment[i].itemHull,equipment[i].itemRate,equipment[i].itemDamage,equipment[i].itemThrust,equipment[i].itemAreaSpread,equipment[i].itemRotarySpeed,equipment[i].itemFiringArc,equipment[i].itemShieldBonDmg,equipment[i].itemHullBonDmg,equipment[i].itemArmor,equipment[i].itemShield,equipment[i].itemRange, equipment[i].itemType));
				//				dataBase.items.RemoveAt (index);
				//				dataBase.items.Insert (index+1, new Item (equipment[i].itemName, index+1, equipment[i].isStackable, equipment[i].isEquipment, equipment[i].stackAmount, equipment[i].maximumStack, equipment[i].itemDesc, equipment[i].itemValue ,equipment[i].itemHull,equipment[i].itemRate,equipment[i].itemDamage,equipment[i].itemThrust,equipment[i].itemAreaSpread,equipment[i].itemRotarySpeed,equipment[i].itemFiringArc,equipment[i].itemShieldBonDmg,equipment[i].itemHullBonDmg,equipment[i].itemArmor,equipment[i].itemShield,equipment[i].itemRange, equipment[i].itemType));
				//				draggingItem = false;
				//				draggedItem = null;
				//				return;
				//				}
				//			}
							if (InInventory)
							{
								print ("Made it to code in EQP");
								equipment[swapIndex] = draggedItem;
								inv.inventory[inv.invPrevIndex] = swapItem;
								draggingItem=false;
								draggedItem = null;
								return;
							}
							print ("Missed target code EQP");
							equipment[eqpPrevIndex] = equipment[i];
							equipment[i] = draggedItem;
							draggingItem = false;
							draggedItem = null;
							
						}
					}
				
				}else {
					if(slotRect.Contains(e.mousePosition))
					{
						if(e.type == EventType.mouseUp && draggingItem)
						{

							equipment[i] = draggedItem;
							draggingItem=false;
							draggedItem = null;
						}
					}
				}	
			
				if (tooltip == "")
				{
					showTooltip = false;
				}
				i++;
			}
			if (inv.swapItem.itemID == -1)
				InInventory = true;
		}
		
	}

	
	
	string CreateToolTip(Item item)
	{//Simple if statement as below to specialize tooltips based on item type.
		if(item.itemType == Item.ItemType.eWarfare)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n" + "Amount : " + item.stackAmount + "\n\n\n\n" + "<color=#f8b526>" + item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Weapon)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + "Damage: " + item.itemDamage + "\n" + "Rate: " + item.itemRate + "\n" + "Range: " + item.itemRange + "\n" + "Realignment Speed: " + item.itemRotarySpeed + "\n" + "Spread: " + item.itemAreaSpread + "\n\n\n" + "<color=#f8b526>" + item.itemDesc + "</color>" ;
		else if (item.itemType == Item.ItemType.Armor)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + item.itemThrust + "\n" + "<color=#f8b526>" + item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Engine)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + item.itemThrust + "\n" + "<color=#f8b526>" + item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Sale)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + "<color=#FCEC00>" + "Value: " + item.itemValue + "</color>\n\n\n\n\n" + "<color=#f8b526>" +  item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Quest)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + "Amount: " + item.stackAmount + "\n\n\n" + "<color=#f8b526>" + item.itemDesc + "</color>" ;
		else
			tooltip = "";
		return tooltip;
	}
	
	void RemoveItem (int id)
	{
		for (int i = 0; i < equipment.Count; i++) 
		{
			if (equipment[i].itemID == id) 
			{
				equipment[i] = new Item();
				break;
			}
		}
	}
	// Add an Item to the inventory based on its item ID - AddItem(id); -
	void AddItem(int id)
	{
		for (int i = 0; i < equipment.Count; i++) 
		{
			if (equipment[i].itemName == null)
			{//add auto-stack functionality via "InventoryContains(item.itemID)"
				if(equipment[i].isStackable == true)
					equipment[i].stackAmount += 1;
				{
					for (int j = 0; j < dataBase.items.Count; j++)
					{
						if (dataBase.items[j].itemID == id)
						{
							equipment[i] = dataBase.items[j];
						}
					}
				}
				break;
			}
		}
	}
	//Use this to check the inventory for an item of a particular ID.
	// mostly usefull for quests, keys, etc
	bool InventoryContains(int id)
	{
		bool result = false;
		for (int i = 0; i < equipment.Count; i++) 
		{
			result = equipment[i].itemID == id;	
			if (result)
			{
				break;
			}
		}
		return result;
	}
	/*	private void UseConsumeable(int id, int slot, bool deleteItem)
		{
			switch (id)
			{// This is for making consumeables. Reference the ID of the consumeable and make it its own case here, each case.
			//is where you pass the attribute changes that occur when using the item. case # = item ID.
				case 2:
				{

				}
		}
	}*/
	/*void SaveInventory()
	{
		
		for (int i = 0; i < inventory.Count; i++)
			PlayerPrefs.SetInt ("Inventory " + i, inventory[i].itemID);
	}
	void LoadInventory()
	{
		for (int i = 0; i < inventory.Count; i++)
			inventory[i] = PlayerPrefs.GetInt("Inventory " + i, -1) >= 0 ? dataBase.items [PlayerPrefs.GetInt ("Inventory " + i)] : new Item();
	}*/
}
