using UnityEngine;
using System.Collections;
using System.Collections.Generic;
[System.Serializable]
public class Inventory : MonoBehaviour {
	
	public int slotsX, slotsY;
	public int slotseX, slotseY;
	public GUISkin InvBackground;
	public GUISkin HeaderBackground;
	public List<Item> inventory = new List<Item>();
	public List<Item> equipment = new List<Item>();
	public List<Item> slots = new List<Item> ();
	public List<Item> equipSlots = new List<Item> ();
	private bool showInventory;
	private bool showEquipment;
	private itemDatabase dataBase;
	public Rect invSize = new Rect (10, 10, 170, 154);
	public Rect eqpSize = new Rect (600, 10, 102, 120);
	private Item iT;
	
	//tooltip
	private bool showTooltip;
	private string tooltip;
	
	//drag and drop
	private bool draggingItem;
	private Item draggedItem;
	private int prevIndex;
	
	
	// Use this for initialization
	void Start () {
		for (int i = 0; i <(slotsX * slotsY); i++)
		{
			slots.Add(new Item());
			inventory.Add (new Item());
		}
		for (int j = 0; j <(slotseX * slotseY); j++)
		{
			equipSlots.Add(new Item());
			equipment.Add (new Item());
		}
		dataBase = GameObject.FindGameObjectWithTag ("ItemDatabase").GetComponent<itemDatabase> ();
		AddItem (0);
		AddItem (1);
		AddItem (2);
		AddItem (4);
		AddItem (5);
		AddItem (6);
		AddItem (7);
		AddItem (8);



		
	}
	void Update()
	{
		if (Input.GetKeyDown (KeyCode.I)) 
		{
			showInventory = !showInventory;
		}
		if (Input.GetKeyDown (KeyCode.C)) 
		{
			showEquipment = !showEquipment;
		}
	}

	void OnGUI()
	{

		//if (GUI.Button (new Rect (400, 350,100,40), "Save Game"))

		//if (GUI.Button (new Rect (40, 350, 100, 40), "Load Game"))
		
		tooltip = "";
		GUI.skin = InvBackground;
		if (showInventory) 
		{
			GUI.Window (0, invSize, DrawInventory, "Inventory", HeaderBackground.GetStyle("Header"));
		//	DrawInventory (0);
		}
		if (showEquipment)
		{
			GUI.Window (1, eqpSize, DrawEquipment, "Equipment", HeaderBackground.GetStyle("Header"));
		//	DrawEquipment(1);
		}
		if (showTooltip && iT != null) 
		{//Use this to change tooltip for Mobile
			GUI.Box (new Rect (Event.current.mousePosition.x + 10f, Event.current.mousePosition.y, 200,200), tooltip, InvBackground.GetStyle("Tooltip"));
			tooltip = CreateToolTip (iT);
		
		}
		if (showTooltip && iT != null) 
		{//Use this to change tooltip for Mobile
			GUI.Box (new Rect (Event.current.mousePosition.x + 10f, Event.current.mousePosition.y, 200,200), tooltip, InvBackground.GetStyle("Tooltip"));
			tooltip = CreateToolTip (iT);
		}
		if (draggingItem)
		{
			GUI.DrawTexture(new Rect (Event.current.mousePosition.x, Event.current.mousePosition.y, 50,50), draggedItem.itemIcon);
		}

	}

	void DrawEquipment(int id)
	{
		iT = null;
		Event e = Event.current;
		int i = 0;
		
		for (int y = 0; y < slotseY; y++)
		{ 
			for(int x = 0; x < slotseX; x++)
			{ 	
				Rect slotRect = new Rect (x * 34, y * 34, 34, 34);
				GUI.Box (slotRect, "", InvBackground.GetStyle ("EquipmentPanel"));
				equipSlots[i] = equipment[i];
				if (equipSlots[i].itemName != null)
				{
					GUI.DrawTexture (slotRect, equipment[i].itemIcon); //was Inventory
					if (slotRect.Contains (e.mousePosition))
					{
						tooltip = CreateToolTip (equipSlots[i]);
						iT = equipSlots[i];
						showTooltip = true;
						if(e.button == 0 && e.type == EventType.mouseDrag && !draggingItem)
						{
							draggingItem = true;
							prevIndex = i;
							draggedItem = equipSlots[i];
							equipment[i] = new Item();
						}
						//if(e.isMouse && e.type == EventType.mouseDown && e.button == 1 && inventory[i].isStackable == false)
						equipment[i] = draggedItem;
						equipment[i] = new Item();
						inventory[i] = draggedItem;
						draggedItem = null;
						if (e.type == EventType.mouseUp && draggingItem)
						{
							if(draggedItem.itemName == equipSlots[i].itemName && draggedItem.isStackable)
								equipment[prevIndex] = equipment[i];
								equipment[i] = draggedItem;
								draggingItem = false;
								draggedItem = null;							
						}
					}
				}else {
					if(slotRect.Contains(e.mousePosition))
					{
						if(e.type == EventType.mouseUp && draggingItem)
						{
							equipment[i] = draggedItem;
							draggingItem=false;
							draggedItem = null;
						}
					}
					
				}
				if (tooltip == "")
				{
					showTooltip = false;
				}
				i++;
			}
		}
		//Trying to get the Tooltip to only show if over an item. It no longer shows at all, regardless of being inside the GUI.Window
		//The Icons also are not draw to the mouse cursor unless outside the window.
		if (draggingItem)
		{
			GUI.DrawTexture(new Rect (Event.current.mousePosition.x, Event.current.mousePosition.y, 50,50), draggedItem.itemIcon);
		}
		if (showTooltip && iT != null) 
		{
			GUI.Label (new Rect (Event.current.mousePosition.x + 10f, Event.current.mousePosition.y, 200, 200), tooltip, InvBackground.GetStyle ("Tooltip"));
		}
	}
	
	void DrawInventory(int id)
	{
		iT = null;
		Event e = Event.current;
		int i = 0;

		for (int y = 0; y < slotsY; y++)
		{
			for(int x = 0; x < slotsX; x++)
			{
				Rect slotRect = new Rect (x * 34, y * 34, 34, 34);
				GUI.Box (slotRect, "", InvBackground.GetStyle ("SlotBackground"));
				slots[i] = inventory[i];
				if (slots[i].itemName != null)
				{
					GUI.DrawTexture (slotRect, inventory[i].itemIcon);
					if (slotRect.Contains (e.mousePosition))
					{
						tooltip = CreateToolTip (slots[i]);
						iT = slots[i];
						showTooltip = true;
						if(e.button == 0 && e.type == EventType.mouseDrag && !draggingItem)
						{
							draggingItem = true;
							prevIndex = i;
							draggedItem = slots[i];
							inventory[i] = new Item();
						}
						if(e.isMouse && e.type == EventType.mouseDown && e.button == 1)
						{
							if (slots[i].itemType == Item.ItemType.eWarfare)
							{
								print ("Used: " + slots[i].itemName);
								inventory[i].stackAmount -=1;
								//UseConsumeable(slots[i].itemID);
								if (slots[i].stackAmount <= 0)
									RemoveItem (slots[i].itemID);
							}
						}
						
						if (e.type == EventType.mouseUp && draggingItem)
						{
							if(draggedItem.itemName == slots[i].itemName && draggedItem.isStackable)
							{ //Stackable items, motherfucker.
								int index = dataBase.items.FindIndex(item=>item.itemName == inventory[i].itemName);
								if(index >= 0)
								{
									print (index);
									inventory[i] = (new Item (inventory[i].itemName, index+1, inventory[i].isStackable, inventory[i].auxillaryID, inventory[i].stackAmount+draggedItem.stackAmount, inventory[i].maximumStack, inventory[i].itemDesc, inventory[i].itemValue ,inventory[i].itemHull,inventory[i].itemRate,inventory[i].itemDamage,inventory[i].itemThrust,inventory[i].itemAreaSpread,inventory[i].itemRotarySpeed,inventory[i].itemFiringArc,inventory[i].itemShieldBonDmg,inventory[i].itemHullBonDmg,inventory[i].itemArmor,inventory[i].itemShield,inventory[i].itemRange, inventory[i].itemType));
									dataBase.items.RemoveAt (index);
									dataBase.items.Insert (index+1, new Item (inventory[i].itemName, index+1, inventory[i].isStackable, inventory[i].auxillaryID, inventory[i].stackAmount, inventory[i].maximumStack, inventory[i].itemDesc, inventory[i].itemValue ,inventory[i].itemHull,inventory[i].itemRate,inventory[i].itemDamage,inventory[i].itemThrust,inventory[i].itemAreaSpread,inventory[i].itemRotarySpeed,inventory[i].itemFiringArc,inventory[i].itemShieldBonDmg,inventory[i].itemHullBonDmg,inventory[i].itemArmor,inventory[i].itemShield,inventory[i].itemRange, inventory[i].itemType));
									draggingItem = false;
									draggedItem = null;
									return;
								}
							}
							inventory[prevIndex] = inventory[i];
							inventory[i] = draggedItem;
							draggingItem = false;
							draggedItem = null;
							
						}
					}
				}else {
					if(slotRect.Contains(e.mousePosition))
					{
						if(e.type == EventType.mouseUp && draggingItem)
						{
							inventory[i] = draggedItem;
							draggingItem=false;
							draggedItem = null;
						}
					}
					
				}
				if (tooltip == "")
				{
					showTooltip = false;
				}
				i++;
			}
		}
		if (draggingItem)
		{
			GUI.DrawTexture(new Rect (Event.current.mousePosition.x, Event.current.mousePosition.y, 50,50), draggedItem.itemIcon);
		}
		if (showTooltip && iT != null) 
		{
			GUI.Label (new Rect (Event.current.mousePosition.x + 10f, Event.current.mousePosition.y, 200, 200), tooltip, InvBackground.GetStyle ("Tooltip"));

	}
	}
	string CreateToolTip(Item item)
	{//Simple if statement as below to specialize tooltips based on item type.
		if(item.itemType == Item.ItemType.eWarfare)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + "Thrust : " + item.itemThrust + "\n" + "<color=#f8b526>" + item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Weapon)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + "Damage: " + item.itemDamage + "\n" + "Rate: " + item.itemRate + "\n" + "Range: " + item.itemRange + "\n" + "Realignment Speed: " + item.itemRotarySpeed + "\n" + "Spread: " + item.itemAreaSpread + "\n\n\n" + "<color=#f8b526>" + item.itemDesc + "</color>" ;
		else if (item.itemType == Item.ItemType.Armor)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + item.itemThrust + "\n" + "<color=#f8b526>" + item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Engine)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + item.itemThrust + "\n" + "<color=#f8b526>" + item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Sale)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + "<color=#FCEC00>" + "Value: " + item.itemValue + "</color>\n\n\n\n\n" + "<color=#f8b526>" +  item.itemDesc + "</color>";
		else if (item.itemType == Item.ItemType.Quest)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + "Amount: " + item.stackAmount + "\n\n\n" + "<color=#f8b526>" + item.itemDesc + "</color>" ;
		else if (item.itemType == Item.ItemType.Shield)
			tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n\n" + "\n" + "Shields: " + item.itemShield + "\n" + "<color=#f8b526>" + item.itemDesc + "</color>" ;
		else
		tooltip = "";
		return tooltip;
	}
	
	void RemoveItem (int id)
	{
		for (int i = 0; i < inventory.Count; i++) 
		{
			if (inventory[i].itemID == id) 
			{
				inventory[i] = new Item();
				break;
			}
		}
	}
	// Add an Item to the inventory based on its item ID - AddItem(id); -
	void AddItem(int id)
	{
		for (int i = 0; i < inventory.Count; i++) 
		{
			if (inventory[i].itemName == null)
			{//add auto-stack functionality via "InventoryContains(item.itemID)"
				if(inventory[i].isStackable == true)
					inventory[i].stackAmount += 1;
				{
					for (int j = 0; j < dataBase.items.Count; j++)
					{
						if (dataBase.items[j].itemID == id)
						{
							inventory[i] = dataBase.items[j];
						}
					}
				}
				break;
			}
		}
	}
	//Use this to check the inventory for an item of a particular ID.
	// mostly usefull for quests, keys, etc
	bool InventoryContains(int id)
	{
		bool result = false;
		for (int i = 0; i < inventory.Count; i++) 
		{
			result = inventory[i].itemID == id;	
			if (result)
			{
				break;
			}
		}
		return result;
	}
	/*	private void UseConsumeable(int id, int slot, bool deleteItem)
		{
			switch (id)
			{// This is for making consumeables. Reference the ID of the consumeable and make it its own case here, each case.
			//is where you pass the attribute changes that occur when using the item. case # = item ID.
				case 2:
				{

				}
		}
	}*/
	/*void SaveInventory()
	{
		
		for (int i = 0; i < inventory.Count; i++)
			PlayerPrefs.SetInt ("Inventory " + i, inventory[i].itemID);
	}
	void LoadInventory()
	{
		for (int i = 0; i < inventory.Count; i++)
			inventory[i] = PlayerPrefs.GetInt("Inventory " + i, -1) >= 0 ? dataBase.items [PlayerPrefs.GetInt ("Inventory " + i)] : new Item();
	}*/
}
