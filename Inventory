using UnityEngine;
using System.Collections;
using System.Collections.Generic;
public class Inventory : MonoBehaviour {

	public int slotsX, slotsY;
	public GUISkin InvBackground;
	public List<Item> inventory = new List<Item>();
	public List<Item> slots = new List<Item> ();
	private bool showInventory;
	private itemDatabase dataBase;

	//tooltip
	private bool showTooltip;
	private string tooltip;

	//drag and drop
	private bool draggingItem;
	private Item draggedItem;
	private int prevIndex;


	// Use this for initialization
	void Start () {
		for (int i = 0; i <(slotsX * slotsY); i++)
		    {
			slots.Add(new Item());
			inventory.Add (new Item());
			}
		dataBase = GameObject.FindGameObjectWithTag ("ItemDatabase").GetComponent<itemDatabase> ();
		AddItem (1);
		AddItem (0);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
		AddItem (1001);
	}
	void Update()
	{
		if (Input.GetKeyDown (KeyCode.I)) 
		{
			showInventory = !showInventory;
		}
	}
	
	void OnGUI()
	{
		if (GUI.Button (new Rect (40, 300,100,40), "Save"))
		    SaveInventory();
		if (GUI.Button (new Rect (40, 350, 100, 40), "Load"))
			LoadInventory ();
		tooltip = "";
		GUI.skin = InvBackground;
		if (showInventory) 
		{
			DrawInventory();
		}
		if (showTooltip && showInventory) 
		{//Use this to change tooltip for Mobile
			GUI.Box (new Rect (Event.current.mousePosition.x + 10f, Event.current.mousePosition.y, 200,200), tooltip, InvBackground.GetStyle("Tooltip"));
		}
		if (draggingItem)
		{
			GUI.DrawTexture(new Rect (Event.current.mousePosition.x, Event.current.mousePosition.y, 50,50), draggedItem.itemIcon);
		}
	}
	void DrawInventory()
	{
		Event e = Event.current;
		int i = 0;

		for (int y = 0; y < slotsY; y++)
		{
			for(int x = 0; x < slotsX; x++)
			{
				Rect slotRect = new Rect (x * 34, y * 34, 34, 34);
				GUI.Box (slotRect, "", InvBackground.GetStyle ("SlotBackground"));
				slots[i] = inventory[i];
				if (slots[i].itemName != null)
				{
					GUI.DrawTexture (slotRect, inventory[i].itemIcon);
					if (slotRect.Contains (e.mousePosition))
					{
						tooltip = CreateToolTip (slots[i]);
						showTooltip = true;
						if(e.button == 0 && e.type == EventType.mouseDrag && !draggingItem)
						{
							draggingItem = true;
							prevIndex = i;
							draggedItem = slots[i];
							inventory[i] = new Item();
						}
							if(e.isMouse && e.type == EventType.mouseDown && e.button == 1)
							{
								if (slots[i].itemType == Item.ItemType.eWarfare)
								{
								print ("Used: " + slots[i].itemName);
								slots[i].stackAmount -=1;
								//UseConsumeable(slots[i].itemID;
								if (slots[i].stackAmount <= 0)
								RemoveItem (slots[i].itemID);
								}
							}

						if (e.type == EventType.mouseUp && draggingItem)
						{
							if(draggedItem.itemName == slots[i].itemName)
								{
								inventory[i] = (new Item (inventory[i].itemName, inventory[i].itemID+1, inventory[i].isStackable, inventory[i].AuxillaryID, inventory[i].stackAmount+draggedItem.stackAmount, inventory[i].maximumStack, inventory[i].itemDesc, inventory[i].itemValue ,inventory[i].itemHull,inventory[i].itemRate,inventory[i].itemDamage,inventory[i].itemThrust,inventory[i].itemAreaSpread,inventory[i].itemRotarySpeed,inventory[i].itemFiringArc,inventory[i].itemShieldBonDmg,inventory[i].itemHullBonDmg,inventory[i].itemArmor,inventory[i].itemShield,inventory[i].itemRange, inventory[i].itemType));
								draggingItem = false;
								draggedItem = null;
								return;
								}
							inventory[prevIndex] = inventory[i];
							inventory[i] = draggedItem;
							draggingItem = false;
							draggedItem = null;

						}
					}
				}else {
					if(slotRect.Contains(e.mousePosition))
					{
						if(e.type == EventType.mouseUp && draggingItem)
						{
							inventory[i] = draggedItem;
							draggingItem=false;
							draggedItem = null;
						}
					}

				}
				if (tooltip == "")
				{
					showTooltip = false;
				}
				i++;
			}
		}

	}

	string CreateToolTip(Item item)
	{
		tooltip = "<color=#ffffff>" + item.itemName + "</color>\n" + item.itemType + "\n" + "Amount: " + item.stackAmount + "\n" + "Damage: " + item.itemDamage + "\n" + "Rate: " + item.itemRate + "\n" + "Range: " + item.itemRange + "\n" + "Realignment Speed: " + item.itemRotarySpeed + "\n" + "Spread: " + item.itemAreaSpread + "\n\n\n" + "<color=#f8b526>" + item.itemDesc + "</color>" ;
		return tooltip;
	}

	void RemoveItem (int id)
	{
		for (int i = 0; i < inventory.Count; i++) 
		{
			if (inventory[i].itemID == id) 
			{
			inventory[i] = new Item();
			break;
			}
		}
	}
	// Add an Item to the inventory based on its item ID - AddItem(id); -
	void AddItem(int id)
	{
		for (int i = 0; i < inventory.Count; i++) 
		{
			if (inventory[i].itemName == null)
			{//add auto-stack functionality via "InventoryContains(item.itemID)"
					if(inventory[i].isStackable == true)
						inventory[i].stackAmount += 1;
				{
					for (int j = 0; j < dataBase.items.Count; j++)
					{
						if (dataBase.items[j].itemID == id)
						{
							inventory[i] = dataBase.items[j];
						}
					}
				}
				break;
			}
		}
	}
	//Use this to check the inventory for an item of a particular ID.
	// mostly usefull for quests, keys, etc
	bool InventoryContains(int id)
	{
		bool result = false;
		for (int i = 0; i < inventory.Count; i++) 
		{
			result = inventory[i].itemID == id;	
			if (result)
			{
				break;
			}
		}
		return result;
	}
/*	private void UseConsumeable(int id, int slot, bool deleteItem)
		{
			switch (id)
			{// This is for making consumeables. Reference the ID of the consumeable and make it its own case here, each case.
			//is where you pass the attribute changes that occur when using the item. case # = item ID.
				case 2:
				{

				}
		}
	}*/
	void SaveInventory()
	{
		for (int i = 0; i< inventory.Count; i++)
		PlayerPrefs.SetInt ("Inventory " + i, inventory [i].itemID);
	}
	void LoadInventory()
	{
		for (int i = 0; i < inventory.Count; i++)
		{
			inventory[i] = PlayerPrefs.GetInt("Inventory " + i, -1) >= 0 ? dataBase.items [PlayerPrefs.GetInt ("Inventory " + i)] : new Item();
		}
	}
}
